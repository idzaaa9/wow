#pragma once

#include <iostream>
#include "character.hpp"
#include "..\stats.hpp"
#include "..\itemTypes\armor.hpp"
#include "..\itemTypes\consumable.hpp"
#include "..\itemTypes\container"
#include "..\itemTypes\misc"
#include "..\itemTypes\weapon"
#include "..\list.hpp"

template<Typename itemType>
struct drop{
  itemType dropItem;
  float dropChance;
};

class lootTable{
  List<drop> listLootTable;
public:
  lootTable() : listLootTable(){}
  lootTable(const List<drop>& ref) : listLootTable(ref){}
  lootTable(const lootTable& ref) : listLootTable(ref.getListLootTable()){}
  List<drop> getListLootTable()const{return listLootTable;}
  void setListLootTable(List<drop> ref){listLootTable = ref;}
};

enum Agressivity{FRIENDLY, AGRESSIVE, NEUTRAL, ANULL};
class Mob{}
  
